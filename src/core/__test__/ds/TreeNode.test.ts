import { describe, expect, it } from 'vitest'
import { TreeNode } from '../../ds/TreeNode'
import { indexerL2R, indexerR2L } from '@/core/ds/Indexer'

// 编写TreeNode测试用例，每个方法单独写it测试块, 使用方法名作为it的name
describe('TreeNode', () => {
  it('constructor', () => {
    const root = new TreeNode(undefined, undefined, 'root')
    expect(root.name).toBe('root')
    expect(root.data).toBeUndefined()
    expect(root.parent).toBeUndefined()
  })

  it('isDescendantOf', () => {
    const root = new TreeNode(undefined, undefined, 'root')
    const child1 = new TreeNode(undefined, root, 'child1')
    const child2 = new TreeNode(undefined, child1, 'child2')
    const child3 = new TreeNode(undefined, child2, 'child3')
    expect(child1.isDescendantOf(root)).toBe(true)
    expect(child2.isDescendantOf(root)).toBe(true)
    expect(child3.isDescendantOf(root)).toBe(true)
    expect(child1.isDescendantOf(child2)).toBe(false)
    expect(child2.isDescendantOf(child3)).toBe(false)
    expect(child3.isDescendantOf(child1)).toBe(true)
  })

  it('removeChildAt', () => {
    const root = new TreeNode(undefined, undefined, 'root')
    const child1 = new TreeNode(undefined, root, 'child1')
    const child2 = new TreeNode(undefined, child1, 'child2')
    const child3 = new TreeNode(undefined, child2, 'child3')
    expect(root.removeChildAt(0)).toBe(child1)
    expect(root.childCount).toBe(0)
    expect(child1.parent).toBeUndefined()
    expect(child1.removeChildAt(0)).toBe(child2)
    expect(child1.childCount).toBe(0)
    expect(child2.parent).toBeUndefined()
    expect(child2.removeChildAt(0)).toBe(child3)
    expect(child2.childCount).toBe(0)
    expect(child3.parent).toBeUndefined()
  })

  it('getChildAt', () => {
    const root = new TreeNode(undefined, undefined, 'root')
    const child1 = new TreeNode(undefined, root, 'child1')
    const child2 = new TreeNode(undefined, child1, 'child2')
    const child3 = new TreeNode(undefined, child2, 'child3')
    expect(root.getChildAt(0)).toBe(child1)
    expect(root.getChildAt(1)).toBeUndefined()
    expect(child1.getChildAt(0)).toBe(child2)
    expect(child1.getChildAt(1)).toBeUndefined()
    expect(child2.getChildAt(0)).toBe(child3)
    expect(child2.getChildAt(1)).toBeUndefined()
  })

  it('removeChild', () => {
    const root = new TreeNode(undefined, undefined, 'root')
    const child1 = new TreeNode(undefined, root, 'child1')
    const child2 = new TreeNode(undefined, child1, 'child2')
    const child3 = new TreeNode(undefined, child2, 'child3')
    expect(root.removeChild(child1)).toBe(child1)
    expect(root.childCount).toBe(0)
    expect(child1.parent).toBeUndefined()
    expect(child2.parent).toBe(child1)
    expect(child3.parent).toBe(child2)
    expect(root.removeChild(child2)).toBeUndefined()
    expect(root.removeChild(child3)).toBeUndefined()
  })

  it('remove', () => {
    const root = new TreeNode(undefined, undefined, 'root')
    const child1 = new TreeNode(undefined, root, 'child1')
    const child2 = new TreeNode(undefined, child1, 'child2')
    const child3 = new TreeNode(undefined, child2, 'child3')
    expect(root.remove()).toBe(root)
    expect(root.parent).toBeUndefined()
    expect(child1.parent).toBe(root)
    expect(child2.parent).toBe(child1)
    expect(child3.parent).toBe(child2)
  })

  it('addChildAt', () => {
    const root = new TreeNode(undefined, undefined, 'root')
    const child1 = new TreeNode(undefined, root, 'child1')
    const child2 = new TreeNode(undefined, child1, 'child2')
    const child3 = new TreeNode(undefined, child2, 'child3')
    const child4 = new TreeNode(undefined, child2, 'child4')
    const child5 = new TreeNode(undefined, child2, 'child5')
    expect(root.addChildAt(child4, 0)).toBe(child4)
    expect(root.childCount).toBe(2)
    expect(child1.childCount).toBe(1)
    expect(child2.childCount).toBe(2)
    expect(child3.childCount).toBe(0)
    expect(child4.parent).toBe(root)
    expect(child5.parent).toBe(child2)
    expect(root.addChildAt(child5, 1)).toBe(child5)
    expect(root.childCount).toBe(3)
    expect(child1.childCount).toBe(1)
    expect(child2.childCount).toBe(1)
    expect(child3.childCount).toBe(0)
    expect(child4.parent).toBe(root)
    expect(child5.parent).toBe(root)
  })

  it('addChild', () => {
    const root = new TreeNode(undefined, undefined, 'root')
    const child1 = new TreeNode(undefined, root, 'child1')
    const child2 = new TreeNode(undefined, child1, 'child2')
    const child3 = new TreeNode(undefined, child2, 'child3')
    const child4 = new TreeNode(undefined, child2, 'child4')
    const child5 = new TreeNode(undefined, child2, 'child5')
    expect(root.addChild(child4)).toBe(child4)
    expect(root.childCount).toBe(2)
    expect(child1.childCount).toBe(1)
    expect(child2.childCount).toBe(2)
    expect(child3.childCount).toBe(0)
    expect(child4.parent).toBe(root)
    expect(child5.parent).toBe(child2)
    expect(root.addChild(child5)).toBe(child5)
    expect(root.childCount).toBe(3)
    expect(child1.childCount).toBe(1)
    expect(child2.childCount).toBe(1)
    expect(child3.childCount).toBe(0)
    expect(child4.parent).toBe(root)
    expect(child5.parent).toBe(root)
  })

  it('parent', () => {
    const root = new TreeNode(undefined, undefined, 'root')
    const child1 = new TreeNode(undefined, root, 'child1')
    const child2 = new TreeNode(undefined, child1, 'child2')
    const child3 = new TreeNode(undefined, child2, 'child3')
    expect(root.parent).toBeUndefined()
    expect(child1.parent).toBe(root)
    expect(child2.parent).toBe(child1)
    expect(child3.parent).toBe(child2)
  })

  it('childCount', () => {
    const root = new TreeNode(undefined, undefined, 'root')
    const child1 = new TreeNode(undefined, root, 'child1')
    const child2 = new TreeNode(undefined, child1, 'child2')
    const child3 = new TreeNode(undefined, child2, 'child3')
    expect(root.childCount).toBe(1)
    expect(child1.childCount).toBe(1)
    expect(child2.childCount).toBe(1)
    expect(child3.childCount).toBe(0)
  })

  it('hasChild', () => {
    const root = new TreeNode(undefined, undefined, 'root')
    const child1 = new TreeNode(undefined, root, 'child1')
    const child2 = new TreeNode(undefined, child1, 'child2')
    const child3 = new TreeNode(undefined, child2, 'child3')
    expect(root.hasChild()).toBe(true)
    expect(child1.hasChild()).toBe(true)
    expect(child2.hasChild()).toBe(true)
    expect(child3.hasChild()).toBe(false)
  })

  it('root', () => {
    const root = new TreeNode(undefined, undefined, 'root')
    const child1 = new TreeNode(undefined, root, 'child1')
    const child2 = new TreeNode(undefined, child1, 'child2')
    const child3 = new TreeNode(undefined, child2, 'child3')
    expect(root.root).toBe(root)
    expect(child1.root).toBe(root)
    expect(child2.root).toBe(root)
    expect(child3.root).toBe(root)
  })

  it('depth', () => {
    const root = new TreeNode(undefined, undefined, 'root')
    const child1 = new TreeNode(undefined, root, 'child1')
    const child2 = new TreeNode(undefined, child1, 'child2')
    const child3 = new TreeNode(undefined, child2, 'child3')
    expect(root.depth).toBe(0)
    expect(child1.depth).toBe(1)
    expect(child2.depth).toBe(2)
    expect(child3.depth).toBe(3)
  })

  it('visit', () => {
    const root = new TreeNode(undefined, undefined, 'root')
    const child1 = new TreeNode(undefined, root, 'child1')
    const child2 = new TreeNode(undefined, child1, 'child2')
    const child3 = new TreeNode(undefined, child2, 'child3')
    const child4 = new TreeNode(undefined, child2, 'child4')
    const visited: string[] = []
    root.visit(
      (node) => {
        visited.push(node.name)
      },
      undefined,
      indexerL2R,
    )
    expect(visited).toEqual(['root', 'child1', 'child2', 'child3', 'child4'])
    visited.splice(0, visited.length)
    root.visit(undefined, (node) => visited.push(node.name), indexerL2R)
    expect(visited).toEqual(['child3', 'child4', 'child2', 'child1', 'root'])
    visited.splice(0, visited.length)
    root.visit((node) => visited.push(node.name), undefined, indexerR2L)
    expect(visited).toEqual(['root', 'child1', 'child2', 'child4', 'child3'])
    visited.splice(0, visited.length)
    root.visit(undefined, (node) => visited.push(node.name), indexerR2L)
    expect(visited).toEqual(['child4', 'child3', 'child2', 'child1', 'root'])
  })
})
